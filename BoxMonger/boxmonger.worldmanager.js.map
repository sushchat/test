{"version":3,"sources":["boxmonger.worldmanager.ts"],"names":["BOXMONGER","BOXMONGER.BlocTypes","BOXMONGER.BlocTypes.constructor","BOXMONGER.Chunk","BOXMONGER.Chunk.constructor","BOXMONGER.Chunk.show","BOXMONGER.Chunk.hide","BOXMONGER.Chunk.positionInWorld","BOXMONGER.Chunk.displayer","BOXMONGER.Chunk.applyChanges","BOXMONGER.Chunk.getHitBox","BOXMONGER.Chunk.getBoxType","BOXMONGER.Chunk.addBox","BOXMONGER.Chunk.removeBox","BOXMONGER.ChunkDisplayer","BOXMONGER.ChunkDisplayer.constructor","BOXMONGER.ChunkDisplayer._initMeshes","BOXMONGER.ChunkDisplayer.addBox","BOXMONGER.ChunkDisplayer.eraseBox","BOXMONGER.ChunkDisplayer.empty","BOXMONGER.ChunkDisplayer.updateMeshes","BOXMONGER.ChunkDisplayer.positionInWorld","BOXMONGER.ChunkDisplayer.isInitialized","BOXMONGER.WordManager","BOXMONGER.WordManager.constructor","BOXMONGER.WordManager.initData","BOXMONGER.WordManager.createTree","BOXMONGER.WordManager.createPlane","BOXMONGER.WordManager.removeFromCoords","BOXMONGER.WordManager.addFromCoords","BOXMONGER.WordManager.addBox","BOXMONGER.WordManager.removeBox","BOXMONGER.WordManager.getChunk","BOXMONGER.WordManager.setChunk","BOXMONGER.WordManager.setPlayerPosition"],"mappings":"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","file":"boxmonger.worldmanager.js","sourceRoot":"C:/Users/etmargra/Documents/GitHub/Samples/Scenes/BoxMonger/","sourcesContent":["module BOXMONGER {\r\n    export class BlocTypes {\r\n        public static STONE: number = 0;\r\n        public static SNOW: number = 1;\r\n        public static GRASS: number = 2;\r\n        public static WOOD: number = 3;\r\n        public static LEAFS: number = 4;\r\n\r\n        public static Types: any[] = [\r\n            { typeName: \"Stone\", typeId: BlocTypes.STONE, url: \"./Assets/Textures/stone.png\", transparency: false },\r\n            { typeName: \"Grass\", typeId: BlocTypes.GRASS, url: \"./Assets/Textures/grass.png\", transparency: false },\r\n            { typeName: \"Snow\", typeId: BlocTypes.SNOW, url: \"./Assets/Textures/snow.png\", transparency: false },\r\n            { typeName: \"Wood\", typeId: BlocTypes.WOOD, url: \"./Assets/Textures/wood.png\", transparency: false },\r\n            { typeName: \"Leafs\", typeId: BlocTypes.LEAFS, url: \"./Assets/Textures/leafs.png\", transparency: true },\r\n        ];\r\n\r\n        public static Materials: BABYLON.Material[] = new Array(BlocTypes.Types.length);\r\n    }\r\n\r\n    export class Chunk {\r\n        public static CHUNKHEIGHT: number = 32;\r\n        public static CHUNKWIDTH: number = 24;\r\n        public static CHUNKDEPTH: number = 24;\r\n\r\n        private _chunkData: number[];\r\n        private _displayer: ChunkDisplayer;\r\n        private _positionInWorld: BABYLON.Vector3;\r\n        private _width: number;\r\n        private _depth: number;\r\n        private _height: number;\r\n        private _boxToDraw: number[][];\r\n        private _boxToErase: number[][];\r\n        private _realHeight: number;\r\n\r\n        constructor(positionInWorld: BABYLON.Vector3) {\r\n            this._width = Chunk.CHUNKWIDTH;\r\n            this._depth = Chunk.CHUNKDEPTH;\r\n            this._height = Chunk.CHUNKHEIGHT;\r\n            this._chunkData = new Array(this._width * this._depth * this._height);\r\n            this._boxToDraw = new Array(BlocTypes.Types.length);\r\n            this._positionInWorld = positionInWorld;\r\n            this._realHeight = 0;\r\n\r\n            for (var i = 0; i < BlocTypes.Types.length; i++) {\r\n                this._boxToDraw[i] = new Array();\r\n            }\r\n            this._boxToErase = new Array(BlocTypes.Types.length);\r\n            for (var i = 0; i < BlocTypes.Types.length; i++) {\r\n                this._boxToErase[i] = new Array();\r\n            }\r\n        }\r\n\r\n        public show(displayer: ChunkDisplayer) {\r\n            if (displayer != undefined) {\r\n                this._displayer = displayer;\r\n                this._displayer.positionInWorld = this._positionInWorld;\r\n                //could be a different method\r\n                this.applyChanges();\r\n            }\r\n        }\r\n\r\n        public hide(): ChunkDisplayer {\r\n            var displayer = this._displayer;\r\n            if (displayer != undefined) {\r\n                displayer.empty();\r\n            }\r\n            return displayer;\r\n        }\r\n\r\n        public get positionInWorld(): BABYLON.Vector3 {\r\n            return this._positionInWorld;\r\n        }\r\n\r\n        public set positionInWorld(value: BABYLON.Vector3) {\r\n            this._positionInWorld = value;\r\n        }\r\n\r\n        public get displayer(): ChunkDisplayer {\r\n            return this._displayer;\r\n        }\r\n\r\n        public set displayer(value: ChunkDisplayer) {\r\n            this._displayer = value;\r\n        }\r\n\r\n        public applyChanges() {\r\n            var boxType;\r\n            if (this._displayer != undefined) {\r\n                if (!this._displayer.isInitialized) {\r\n                    //init boxes\r\n                    for (var x = 0; x < this._width; x++) {\r\n                        for (var y = 0; y <= this._realHeight; y++) {\r\n                            for (var z = 0; z < this._depth; z++) {\r\n                                boxType = this.getBoxType(x, y, z);\r\n                                if (boxType != undefined) {\r\n                                    this._displayer.addBox(x, y, z, boxType);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < BlocTypes.Types.length; i++) {\r\n                        this._boxToDraw[i] = new Array();\r\n                    }\r\n                    this._boxToErase = new Array(BlocTypes.Types.length);\r\n                    for (var i = 0; i < BlocTypes.Types.length; i++) {\r\n                        this._boxToErase[i] = new Array();\r\n                    }\r\n                    this._displayer.updateMeshes();\r\n                    this._displayer.isInitialized = true;\r\n                }\r\n                else {\r\n                    //update boxes\r\n                    for (var meshId = 0; meshId < BlocTypes.Types.length; meshId++) {\r\n                        while (this._boxToDraw[meshId].length > 0) {\r\n                            var x = this._boxToDraw[meshId].pop();\r\n                            var y = this._boxToDraw[meshId].pop();\r\n                            var z = this._boxToDraw[meshId].pop();\r\n                            this._displayer.addBox(x, y, z, meshId);\r\n                        }\r\n                        while (this._boxToErase[meshId].length > 0) {\r\n                            var x = this._boxToErase[meshId].pop();\r\n                            var y = this._boxToErase[meshId].pop();\r\n                            var z = this._boxToErase[meshId].pop();\r\n                            this._displayer.eraseBox(x, y, z, meshId);\r\n                        }\r\n                        this._displayer.updateMeshes();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public getHitBox(ray: BABYLON.Ray, playerPosition: BABYLON.Vector3): BABYLON.Vector3 {\r\n            var boxType;\r\n            var hitbox;\r\n            var distanceFromPlayer;\r\n            for (var x = 0; x < this._width; x++) {\r\n                for (var y = 0; y <= this._realHeight; y++) {\r\n                    for (var z = 0; z < this._depth; z++) {\r\n                        boxType = this.getBoxType(x, y, z);\r\n                        if (boxType != undefined) {\r\n                            var half = 0.5;\r\n                            var minimum = new BABYLON.Vector3(this.positionInWorld.x + x - half, this.positionInWorld.y + y - half, this.positionInWorld.z + z - half);\r\n                            var maximum = new BABYLON.Vector3(this.positionInWorld.x + x + half, this.positionInWorld.y + y + half, this.positionInWorld.z + z + half);\r\n                            var intersected = ray.intersectsBoxMinMax(minimum, maximum);\r\n                            var hit = new BABYLON.Vector3(this.positionInWorld.x + x, this.positionInWorld.y + y, this.positionInWorld.z + z);\r\n                            if (intersected && (hitbox === undefined || distanceFromPlayer > BABYLON.Vector3.Distance(hit, playerPosition))) {\r\n                                hitbox = hit;\r\n                                distanceFromPlayer = BABYLON.Vector3.Distance(hitbox, playerPosition);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return hitbox;\r\n        }\r\n\r\n        public getBoxType(x: number, y: number, z: number): number {\r\n            return this._chunkData[x * this._width + y * this._width * this._height + z];\r\n        }\r\n\r\n        public addBox(x: number, y: number, z: number, boxType: number) {\r\n            this._chunkData[x * this._width + y * this._width * this._height + z] = boxType;\r\n            if (y > this._realHeight)\r\n                this._realHeight = y;\r\n            this._boxToDraw[boxType].push(z, y, x);\r\n        }\r\n\r\n        public removeBox(x: number, y: number, z: number) {\r\n            var boxType = this.getBoxType(x, y, z);\r\n            this._chunkData[x * this._width + y * this._width * this._height + z] = undefined;\r\n            if (boxType != undefined)\r\n                this._boxToErase[boxType].push(z, y, x);\r\n        }\r\n    }\r\n\r\n    export class ChunkDisplayer {\r\n        private _meshes: BoxMesh[];\r\n        private _scene: BABYLON.Scene;\r\n        private _positionInWorld: BABYLON.Vector3;\r\n        private _unitBoxSize: number;\r\n        private _isInitialized: boolean;\r\n\r\n        constructor(unitBoxSize: number, positionInWorld: BABYLON.Vector3, scene: BABYLON.Scene) {\r\n            this._scene = scene;\r\n            this._positionInWorld = positionInWorld;\r\n            this._unitBoxSize = unitBoxSize;\r\n            this._isInitialized = false;\r\n            this._initMeshes();\r\n        }\r\n\r\n        private _initMeshes() {\r\n            this._meshes = new Array(BlocTypes.Types.length);\r\n\r\n            for (var typeIndex = 0; typeIndex < BlocTypes.Types.length; typeIndex++) {\r\n                var material;\r\n                if (BlocTypes.Materials[typeIndex] === undefined) {\r\n                    material = new BABYLON.StandardMaterial(BlocTypes.Types[typeIndex].typeName + \"Material\", this._scene);\r\n                    material.diffuseTexture = new BABYLON.Texture(BlocTypes.Types[typeIndex].url, this._scene);\r\n                    if (BlocTypes.Types[typeIndex].transparency) {\r\n                        material.diffuseTexture.hasAlpha = true;\r\n                    }\r\n                    BlocTypes.Materials[typeIndex] = material;\r\n                }\r\n                else {\r\n                    material = BlocTypes.Materials[typeIndex];\r\n                }\r\n                this._meshes[BlocTypes.Types[typeIndex].typeId] = new BoxMesh(BlocTypes.Types[typeIndex].typeName + \"Box\", this._unitBoxSize, Chunk.CHUNKHEIGHT * 4, this._scene, material, this._positionInWorld);\r\n                this._meshes[BlocTypes.Types[typeIndex].typeId].checkCollisions = true;\r\n            }\r\n        }\r\n\r\n        public addBox(x: number, y: number, z: number, boxType: number) {\r\n            this._meshes[boxType].addBox(x, y, z);\r\n        }\r\n\r\n        public eraseBox(x: number, y: number, z: number, boxType: number) {\r\n            this._meshes[boxType].removeBox(x, y, z);\r\n        }\r\n\r\n        public empty() {\r\n            for (var meshId = 0; meshId < this._meshes.length; meshId++) {\r\n                this._meshes[meshId].empty();\r\n            }\r\n            this._isInitialized = false;\r\n        }\r\n\r\n        public updateMeshes() {\r\n            for (var meshId = 0; meshId < this._meshes.length; meshId++) {\r\n                this._meshes[meshId].updateMesh();\r\n            }\r\n        }\r\n\r\n        public get positionInWorld(): BABYLON.Vector3 {\r\n            return this._positionInWorld;\r\n        }\r\n\r\n        public set positionInWorld(value: BABYLON.Vector3) {\r\n            this._positionInWorld = value;\r\n            for (var meshId = 0; meshId < this._meshes.length; meshId++) {\r\n                this._meshes[meshId].positionInWorld = this._positionInWorld;\r\n            }\r\n        }\r\n\r\n        public get isInitialized(): boolean {\r\n            return this._isInitialized;\r\n        }\r\n\r\n        public set isInitialized(value: boolean) {\r\n            this._isInitialized = value;\r\n        }\r\n    }\r\n\r\n    export class WordManager {\r\n        private _world: Chunk[];\r\n        private _availableDisplayers: ChunkDisplayer[];\r\n        private _displayedChunk: Chunk[];\r\n        private _width: number;\r\n        private _depth: number;\r\n        private _visibleChunksAroundPlayer: number = 2;\r\n        private _playerPosition: BABYLON.Vector3;\r\n        private _unitBoxSize: number;\r\n        private _scene: BABYLON.Scene;\r\n\r\n        constructor(width: number, depth: number, unitBoxSize: number, scene: BABYLON.Scene) {\r\n            this._world = new Array(width * depth);\r\n            this._displayedChunk = new Array();\r\n            this._width = width;\r\n            this._depth = depth;\r\n            this._unitBoxSize = unitBoxSize;\r\n            this._scene = scene;\r\n\r\n            //init displayers\r\n            this._availableDisplayers = new Array();\r\n            for (var disp = 0; disp < (this._visibleChunksAroundPlayer + 1) * (this._visibleChunksAroundPlayer + 1) * 4; disp++) {\r\n                this._availableDisplayers.push(new ChunkDisplayer(this._unitBoxSize, new BABYLON.Vector3(0, 0, 0), this._scene));\r\n            }\r\n        }\r\n\r\n        public initData() {\r\n            var height = 1;\r\n            for (var x = 0; x < this._width * Chunk.CHUNKWIDTH; x++) {\r\n                for (var z = 0; z < this._depth * Chunk.CHUNKDEPTH; z++) {\r\n                    height = 1;\r\n                    this.addBox(x, 1, z, BlocTypes.GRASS);\r\n                    if (Math.random() > 0.8) {\r\n                        if (Math.random() > 0.8) {\r\n                            this.addBox(x, 2, z, BlocTypes.STONE);\r\n                        }\r\n                        else {\r\n                            this.addBox(x, 2, z, BlocTypes.SNOW);\r\n                        }\r\n                        height = 2;\r\n                    }\r\n                    if (Math.random() > 0.99) {\r\n                        this.createTree(new BABYLON.Vector3(x, height + 1, z));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public createTree(position: BABYLON.Vector3) {\r\n            var height = Math.floor(Math.random() * 5) + 2;\r\n            for (var h = 0; h < height; h++) {\r\n                this.addBox(position.x, position.y + h, position.z, BlocTypes.WOOD);\r\n            }\r\n\r\n            this.createPlane(new BABYLON.Vector3(position.x - 2, position.y + height, position.z - 2), 5, 5, BlocTypes.LEAFS);\r\n            this.createPlane(new BABYLON.Vector3(position.x - 3, position.y + height + 1, position.z - 3), 7, 7, BlocTypes.LEAFS);\r\n            this.createPlane(new BABYLON.Vector3(position.x - 3, position.y + height + 2, position.z - 3), 7, 7, BlocTypes.LEAFS);\r\n            this.createPlane(new BABYLON.Vector3(position.x - 2, position.y + height + 3, position.z - 2), 5, 5, BlocTypes.LEAFS);\r\n        }\r\n\r\n        public createPlane(position: BABYLON.Vector3, width: number, depth: number, blockType: number) {\r\n            for (var x = position.x; x < position.x + width; x++) {\r\n                for (var z = position.z; z < position.z + depth; z++) {\r\n                    this.addBox(x, position.y, z, blockType);\r\n                }\r\n            }\r\n        }\r\n\r\n        public removeFromCoords(x: number, y: number, camera: BABYLON.Camera) {\r\n            var ray = this._scene.createPickingRay(x, y, BABYLON.Matrix.Identity(), camera);\r\n            var hitChunkFar;\r\n            var hitChunk;\r\n            var distanceFromPlayerHitChunk;\r\n            var distanceFromPlayerHitChunkFar;\r\n\r\n            //for (var chunkid = 0; chunkid < this._displayedChunk.length; chunkid++) {\r\n            //    var chunk = this._displayedChunk[chunkid];\r\n            //    var minimum = chunk.positionInWorld.add(new BABYLON.Vector3(-Chunk.CHUNKWIDTH / 2, -Chunk.CHUNKHEIGHT / 2, -Chunk.CHUNKDEPTH / 2));\r\n            //    var maximum = chunk.positionInWorld.add(new BABYLON.Vector3(Chunk.CHUNKWIDTH / 2, Chunk.CHUNKHEIGHT / 2, Chunk.CHUNKDEPTH / 2));\r\n            //    var intersected = ray.intersectsBoxMinMax(minimum, maximum);\r\n            //    if (intersected) {\r\n            //        if (hitChunk === undefined || distanceFromPlayerHitChunk > BABYLON.Vector3.Distance(chunk.positionInWorld, this._playerPosition)) {\r\n            //            hitChunk = chunk;\r\n            //            distanceFromPlayerHitChunk = BABYLON.Vector3.Distance(chunk.positionInWorld, this._playerPosition);\r\n            //        }\r\n            //        else if(hitChunk === undefined || distanceFromPlayerHitChunkFar > BABYLON.Vector3.Distance(chunk.positionInWorld, this._playerPosition)) {\r\n            //            hitChunkFar = chunk;\r\n            //            distanceFromPlayerHitChunkFar = BABYLON.Vector3.Distance(chunk.positionInWorld, this._playerPosition);\r\n            //        }\r\n            //    }\r\n            //}\r\n\r\n            var playerchunkX = Math.floor(this._playerPosition.x / Chunk.CHUNKWIDTH);\r\n            var playerchunkY = Math.floor(this._playerPosition.z / Chunk.CHUNKDEPTH);\r\n            hitChunk = this.getChunk(playerchunkX, playerchunkY);\r\n\r\n            if (hitChunk != undefined) {\r\n                var hitBox = hitChunk.getHitBox(ray, this._playerPosition);\r\n\r\n                if (hitBox != undefined) {\r\n                    this.removeBox(hitBox.x, hitBox.y, hitBox.z);\r\n                    hitChunk.applyChanges();\r\n                }\r\n            }\r\n        }\r\n\r\n        public addFromCoords(x: number, y: number, camera: BABYLON.Camera) {\r\n            var ray = this._scene.createPickingRay(x, y, BABYLON.Matrix.Identity(), camera);\r\n            var hitChunkFar;\r\n            var hitChunk;\r\n            var distanceFromPlayerHitChunk;\r\n            var distanceFromPlayerHitChunkFar;\r\n\r\n            //for (var chunkid = 0; chunkid < this._displayedChunk.length; chunkid++) {\r\n            //    var chunk = this._displayedChunk[chunkid];\r\n            //    var minimum = chunk.positionInWorld.add(new BABYLON.Vector3(-Chunk.CHUNKWIDTH / 2, -Chunk.CHUNKHEIGHT / 2, -Chunk.CHUNKDEPTH / 2));\r\n            //    var maximum = chunk.positionInWorld.add(new BABYLON.Vector3(Chunk.CHUNKWIDTH / 2, Chunk.CHUNKHEIGHT / 2, Chunk.CHUNKDEPTH / 2));\r\n            //    var intersected = ray.intersectsBoxMinMax(minimum, maximum);\r\n            //    if (intersected) {\r\n            //        if (hitChunk === undefined || distanceFromPlayerHitChunk > BABYLON.Vector3.Distance(chunk.positionInWorld, this._playerPosition)) {\r\n            //            hitChunk = chunk;\r\n            //            distanceFromPlayerHitChunk = BABYLON.Vector3.Distance(chunk.positionInWorld, this._playerPosition);\r\n            //        }\r\n            //        else if(hitChunk === undefined || distanceFromPlayerHitChunkFar > BABYLON.Vector3.Distance(chunk.positionInWorld, this._playerPosition)) {\r\n            //            hitChunkFar = chunk;\r\n            //            distanceFromPlayerHitChunkFar = BABYLON.Vector3.Distance(chunk.positionInWorld, this._playerPosition);\r\n            //        }\r\n            //    }\r\n            //}\r\n\r\n            var playerchunkX = Math.floor(this._playerPosition.x / Chunk.CHUNKWIDTH);\r\n            var playerchunkY = Math.floor(this._playerPosition.z / Chunk.CHUNKDEPTH);\r\n            hitChunk = this.getChunk(playerchunkX, playerchunkY);\r\n\r\n            if (hitChunk != undefined) {\r\n                var hitBox = hitChunk.getHitBox(ray, this._playerPosition);\r\n\r\n                if (hitBox != undefined) {\r\n                    this.addBox(hitBox.x, hitBox.y + 1, hitBox.z, BlocTypes.GRASS);\r\n                    hitChunk.applyChanges();\r\n                }\r\n            }\r\n        }\r\n\r\n        public addBox(x: number, y: number, z: number, blocType: number) {\r\n            //Select chunk\r\n            var chunkx = Math.floor(x / Chunk.CHUNKWIDTH);\r\n            var chunky = Math.floor(z / Chunk.CHUNKDEPTH)\r\n            var chunk = this.getChunk(chunkx, chunky);\r\n\r\n            chunk.addBox(x - chunkx * Chunk.CHUNKWIDTH, y, z - chunky * Chunk.CHUNKDEPTH, blocType);\r\n        }\r\n\r\n        public removeBox(x, y, z) {\r\n            //Select chunk\r\n            var chunkx = Math.floor(x / Chunk.CHUNKWIDTH);\r\n            var chunky = Math.floor(z / Chunk.CHUNKDEPTH)\r\n            var chunk = this.getChunk(chunkx, chunky);\r\n\r\n            chunk.removeBox(x - chunkx * Chunk.CHUNKWIDTH, y, z - chunky * Chunk.CHUNKDEPTH);\r\n        }\r\n\r\n        public getChunk(x: number, y: number): Chunk {\r\n            var chunk = this._world[x * this._width + y];\r\n            if (chunk === undefined) {\r\n                chunk = new Chunk(new BABYLON.Vector3(x * Chunk.CHUNKWIDTH, 0, y * Chunk.CHUNKDEPTH));\r\n                this.setChunk(x, y, chunk);\r\n            }\r\n            return chunk;\r\n        }\r\n\r\n        public setChunk(x: number, y: number, chunk: Chunk) {\r\n            return this._world[x * this._width + y] = chunk;\r\n        }\r\n\r\n        public setPlayerPosition(x: number, y: number, z: number) {\r\n\r\n            //Trouver le chunk dans lequel le joueur se trouve\r\n            var newChunkX = Math.round(x / Chunk.CHUNKWIDTH);\r\n            var newChunkY = Math.round(z / Chunk.CHUNKDEPTH);\r\n\r\n            var newChunkBoundingBoxXMin = newChunkX - this._visibleChunksAroundPlayer;\r\n            var newChunkBoundingBoxXMax = newChunkX + this._visibleChunksAroundPlayer;\r\n            var newChunkBoundingBoxYMin = newChunkY - this._visibleChunksAroundPlayer;\r\n            var newChunkBoundingBoxYMax = newChunkY + this._visibleChunksAroundPlayer;\r\n\r\n            if (this._playerPosition === undefined) {\r\n                this._playerPosition = new BABYLON.Vector3(x, y, z);\r\n                for (var x = newChunkBoundingBoxXMin; x <= newChunkBoundingBoxXMax; x++) {\r\n                    for (var y = newChunkBoundingBoxYMin; y <= newChunkBoundingBoxYMax; y++) {\r\n                        var chunk = this.getChunk(x, y);\r\n                        chunk.show(this._availableDisplayers.pop());\r\n                        this._displayedChunk.push(chunk);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                //Current Chunk\r\n                var oldChunkX = Math.round(this._playerPosition.x / Chunk.CHUNKWIDTH);\r\n                var oldChunkY = Math.round(this._playerPosition.z / Chunk.CHUNKDEPTH);\r\n\r\n                var oldChunkBoundingBoxXMin = oldChunkX - this._visibleChunksAroundPlayer;\r\n                var oldChunkBoundingBoxXMax = oldChunkX + this._visibleChunksAroundPlayer;\r\n                var oldChunkBoundingBoxYMin = oldChunkY - this._visibleChunksAroundPlayer;\r\n                var oldChunkBoundingBoxYMax = oldChunkY + this._visibleChunksAroundPlayer;\r\n\r\n                // Si c'est un autre chunk\r\n                if (oldChunkX != newChunkX || oldChunkY != newChunkY) {\r\n                    this._playerPosition.x = x;\r\n                    this._playerPosition.y = y;\r\n                    this._playerPosition.z = z;\r\n\r\n                    // Libérer les chunks à virer\r\n                    for (var x = oldChunkBoundingBoxXMin; x <= oldChunkBoundingBoxXMax; x++) {\r\n                        for (var y = oldChunkBoundingBoxYMin; y <= oldChunkBoundingBoxYMax; y++) {\r\n                            if (x < newChunkBoundingBoxXMin || x > newChunkBoundingBoxXMax || y < newChunkBoundingBoxYMin || y > newChunkBoundingBoxYMax) {\r\n                                var removedChunk = this.getChunk(x, y);\r\n                                var displayer = removedChunk.hide();\r\n                                this._displayedChunk.splice(this._displayedChunk.indexOf(removedChunk), 1);\r\n                                if (displayer != undefined)\r\n                                    this._availableDisplayers.push(displayer);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Afficher les chunks à afficher\r\n                    for (var x = newChunkBoundingBoxXMin; x <= newChunkBoundingBoxXMax; x++) {\r\n                        for (var y = newChunkBoundingBoxYMin; y <= newChunkBoundingBoxYMax; y++) {\r\n                            if (x < oldChunkBoundingBoxXMin || x > oldChunkBoundingBoxXMax || y < oldChunkBoundingBoxYMin || y > oldChunkBoundingBoxYMax) {\r\n                                var chunk = this.getChunk(x, y);\r\n                                chunk.show(this._availableDisplayers.pop());\r\n                                this._displayedChunk.push(chunk);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"]}