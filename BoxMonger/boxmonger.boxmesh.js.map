{"version":3,"sources":["boxmonger.boxmesh.ts"],"names":["BOXMONGER","BOXMONGER.BoxMesh","BOXMONGER.BoxMesh.constructor","BOXMONGER.BoxMesh.isVisible","BOXMONGER.BoxMesh.positionInWorld","BOXMONGER.BoxMesh._initMesh","BOXMONGER.BoxMesh.addBox","BOXMONGER.BoxMesh.addBoxes","BOXMONGER.BoxMesh.removeBox","BOXMONGER.BoxMesh.moveBox","BOXMONGER.BoxMesh.removeBoxes","BOXMONGER.BoxMesh.empty","BOXMONGER.BoxMesh._getCubePosition","BOXMONGER.BoxMesh._setCubePosition","BOXMONGER.BoxMesh._addBoxGeneric","BOXMONGER.BoxMesh._Clone","BOXMONGER.BoxMesh._initCubeVerticeCache","BOXMONGER.BoxMesh.updateMesh","BOXMONGER.BoxMesh._extendCapacity","BOXMONGER.BoxMesh._getFirstWritablePosition","BOXMONGER.BoxMesh.checkCollisions","BOXMONGER.BoxMesh._cleanDataForRemovedCubes"],"mappings":"AAAA,IAAO,SAAS,CA8Xf;AA9XD,WAAO,SAAS,EAAC,CAAC;IACdA,IAAaA,OAAOA;QAqBhBC,SArBSA,OAAOA,CAqBJA,IAAYA,EAAEA,WAAmBA,EAAEA,aAAqBA,EAAEA,KAAoBA,EAAEA,QAA0BA,EAAEA,QAA0BA;YAV1IC,mBAAcA,GAAsBA;gBACxCA,IAAIA,OAAOA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA;gBAC5BA,IAAIA,OAAOA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC7BA,IAAIA,OAAOA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA;gBAC5BA,IAAIA,OAAOA,CAACA,OAAOA,CAACA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA;gBAC7BA,IAAIA,OAAOA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA;gBAC5BA,IAAIA,OAAOA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,EAAEA,CAACA,CAACA;aAChCA,CAACA;YAIEA,IAAIA,CAACA,YAAYA,GAAGA,WAAWA,CAACA;YAChCA,IAAIA,CAACA,SAASA,GAAGA,aAAaA,CAACA;YAC/BA,IAAIA,CAACA,YAAYA,GAAGA,QAAQA,CAACA;YAC7BA,IAAIA,CAACA,MAAMA,GAAGA,KAAKA,CAACA;YACpBA,IAAIA,CAACA,KAAKA,GAAGA,IAAIA,OAAOA,CAACA,IAAIA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YACjDA,EAAEA,CAACA,CAACA,QAAQA,KAAKA,SAASA,CAACA,CAACA,CAACA;gBACzBA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,GAAGA,QAAQA,CAACA;YACnCA,CAACA;YACDA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,GAAGA,IAAIA,CAACA,YAAYA,CAACA;YACxCA,IAAIA,CAACA,qBAAqBA,EAAEA,CAAAA;YAC5BA,IAAIA,CAACA,SAASA,EAAEA,CAACA;YACjBA,IAAIA,CAACA,sBAAsBA,GAAGA,IAAIA,KAAKA,EAAEA,CAACA;YAC1CA,IAAIA,CAACA,sBAAsBA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAEpCA,AACAA,kBADkBA;YAClBA,IAAIA,CAACA,MAAMA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACzBA,CAACA;QAEDD,sBAAWA,8BAASA;iBAApBA;gBACIE,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA;YAChCA,CAACA;iBAEDF,UAAqBA,KAAcA;gBAC/BE,IAAIA,CAACA,KAAKA,CAACA,SAASA,GAAGA,KAAKA,CAACA;YACjCA,CAACA;;;WAJAF;QAMDA,sBAAWA,oCAAeA;iBAA1BA;gBACIG,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,CAACA;YAC/BA,CAACA;iBAEDH,UAA2BA,KAAsBA;gBAC7CG,IAAIA,CAACA,KAAKA,CAACA,QAAQA,GAAGA,KAAKA,CAACA;YAChCA,CAACA;;;WAJAH;QAMDA,iCAAiCA;QACzBA,2BAASA,GAAjBA;YACII,IAAIA,UAAUA,GAAGA,IAAIA,OAAOA,CAACA,UAAUA,EAAEA,CAACA;YAC1CA,UAAUA,CAACA,OAAOA,GAAGA,EAAEA,CAACA;YACxBA,UAAUA,CAACA,SAASA,GAAGA,EAAEA,CAACA;YAC1BA,UAAUA,CAACA,GAAGA,GAAGA,EAAEA,CAACA;YACpBA,UAAUA,CAACA,OAAOA,GAAGA,EAAEA,CAACA;YAExBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,SAASA,GAAGA,CAACA,EAAEA,SAASA,GAAGA,IAAIA,CAACA,SAASA,EAAEA,SAASA,EAAEA,EAAEA,CAACA;gBAE9DA,GAAGA,CAACA,CAACA,GAAGA,CAACA,KAAKA,GAAGA,CAACA,EAAEA,KAAKA,GAAGA,IAAIA,CAACA,cAAcA,CAACA,MAAMA,EAAEA,KAAKA,EAAEA,EAAEA,CAACA;oBAC9DA,IAAIA,MAAMA,GAAGA,IAAIA,CAACA,cAAcA,CAACA,KAAKA,CAACA,CAACA;oBAExCA,AACAA,sEADsEA;wBAClEA,KAAKA,GAAGA,IAAIA,OAAOA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBAC9DA,IAAIA,KAAKA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,KAAKA,CAACA,MAAMA,EAAEA,KAAKA,CAACA,CAACA;oBAEjDA,AACAA,0BAD0BA;oBAC1BA,UAAUA,CAACA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBACtDA,UAAUA,CAACA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBACtDA,UAAUA,CAACA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBACtDA,UAAUA,CAACA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA;oBAEtDA,AACAA,iBADiBA;oBACjBA,EAAEA,CAACA,CAACA,MAAMA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA;wBAClBA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;oBACnCA,CAACA;oBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA;wBACvBA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;oBACnCA,CAACA;oBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBACtBA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;oBACnCA,CAACA;oBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBACtBA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;oBACnCA,CAACA;oBACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBACtBA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;wBAC9BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;wBAC9BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,MAAMA,CAACA,CAACA;wBACjCA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,MAAMA,CAACA,CAACA;oBACrCA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACFA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,IAAIA,CAACA,CAACA;wBAC/BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;wBAC9BA,UAAUA,CAACA,GAAGA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;oBAClCA,CAACA;gBACLA,CAACA;YACLA,CAACA;YAEDA,UAAUA,CAACA,SAASA,GAAGA,IAAIA,KAAKA,CAACA,IAAIA,CAACA,SAASA,GAAGA,EAAEA,CAACA,CAACA;YACtDA,IAAIA,CAACA,eAAeA,GAAGA,EAAGA,CAACA;YAC3BA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA;YAExBA,AACAA,iBADiBA;YACjBA,UAAUA,CAACA,WAAWA,CAACA,IAAIA,CAACA,KAAKA,EAAEA,IAAIA,CAACA,CAACA;YACzCA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,YAAYA,CAACA,IAAIA,CAACA,KAAKA,CAACA,eAAeA,CAACA,OAAOA,CAACA,YAAYA,CAACA,YAAYA,CAACA,CAACA,CAACA;YAClGA,IAAIA,CAACA,QAAQA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,EAAEA,CAACA;QAC5CA,CAACA;QAEDJ,gBAAgBA;QACTA,wBAAMA,GAAbA,UAAcA,CAASA,EAAEA,CAASA,EAAEA,CAASA;YACzCK,EAAEA,CAACA,CAACA,IAAIA,CAACA,cAAcA,GAAGA,IAAIA,CAACA,SAASA,CAACA;gBACrCA,IAAIA,CAACA,eAAeA,CAACA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA,CAACA;YAElDA,IAAIA,CAACA,cAAcA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,IAAIA,CAACA,UAAUA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,CAACA;QACjEA,CAACA;QAEDL,6BAA6BA;QACtBA,0BAAQA,GAAfA,UAAgBA,SAAmBA;YAC/BM,EAAEA,CAACA,CAACA,IAAIA,CAACA,cAAcA,GAAGA,SAASA,CAACA,MAAMA,GAAGA,CAACA,GAAGA,IAAIA,CAACA,SAASA,CAACA;gBAC5DA,IAAIA,CAACA,eAAeA,CAACA,IAAIA,CAACA,cAAcA,GAAGA,SAASA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA;YAErEA,IAAIA,GAAGA,GAAGA,SAASA,CAACA,MAAMA,CAACA;YAC3BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,GAAGA,EAAEA,CAACA,IAAIA,CAACA,EAAEA,CAACA;gBAC9BA,IAAIA,CAACA,cAAcA,CAACA,SAASA,CAACA,CAACA,CAACA,EAAEA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,IAAIA,CAACA,UAAUA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YAC1GA,CAACA;QACLA,CAACA;QAEDN,mBAAmBA;QACZA,2BAASA,GAAhBA,UAAiBA,CAASA,EAAEA,CAASA,EAAEA,CAASA;YAC5CO,IAAIA,eAAeA,GAAGA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACrDA,EAAEA,CAACA,CAACA,eAAeA,IAAIA,SAASA,CAACA,CAACA,CAACA;gBAC/BA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBACnCA,IAAIA,CAACA,sBAAsBA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;gBAClDA,IAAIA,CAACA,cAAcA,EAAEA,CAACA;gBACtBA,IAAIA,CAACA,yBAAyBA,CAACA,IAAIA,YAAYA,CAACA,CAACA,eAAeA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC5EA,CAACA;QACLA,CAACA;QAEMP,yBAAOA,GAAdA,UAAeA,CAASA,EAAEA,CAASA,EAAEA,CAASA,EAAEA,IAAYA,EAAEA,IAAYA,EAAEA,IAAYA;YACpFQ,IAAIA,aAAaA,GAAGA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACnDA,EAAEA,CAACA,CAACA,aAAaA,KAAKA,SAASA,CAACA;gBAC5BA,MAAMA,CAACA;YAEXA,IAAIA,mBAAmBA,GAAGA,aAAaA,GAAGA,CAACA,GAAGA,EAAEA,CAACA;YACjDA,IAAIA,iBAAiBA,GAAGA,aAAaA,GAAGA,CAACA,GAAGA,EAAEA,CAACA;YAC/CA,IAAIA,sBAAsBA,GAAGA,CAACA,CAACA;YAG/BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,KAAKA,GAAGA,CAACA,EAAEA,KAAKA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,EAAEA,CAACA;gBAErCA,AACAA,0BAD0BA;oBACtBA,MAAMA,GAAGA,IAAIA,CAACA,iBAAiBA,CAACA,sBAAsBA,EAAEA,CAACA,CAACA;gBAC9DA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBACzDA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBACzDA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBAEzDA,MAAMA,GAAGA,IAAIA,CAACA,iBAAiBA,CAACA,sBAAsBA,EAAEA,CAACA,CAACA;gBAC1DA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBACzDA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBACzDA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBAEzDA,MAAMA,GAAGA,IAAIA,CAACA,iBAAiBA,CAACA,sBAAsBA,EAAEA,CAACA,CAACA;gBAC1DA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBACzDA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBACzDA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBAEzDA,MAAMA,GAAGA,IAAIA,CAACA,iBAAiBA,CAACA,sBAAsBA,EAAEA,CAACA,CAACA;gBAC1DA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBACzDA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;gBACzDA,IAAIA,CAACA,UAAUA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,IAAIA,CAACA;YAC7DA,CAACA;YAEDA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,aAAaA,CAACA,CAACA;QAC3DA,CAACA;QAEDR,gCAAgCA;QACzBA,6BAAWA,GAAlBA,UAAmBA,SAAmBA;YAClCS,IAAIA,GAAGA,GAAGA,SAASA,CAACA,MAAMA,CAACA;YAC3BA,IAAIA,YAAYA,GAAGA,IAAIA,YAAYA,CAACA,GAAGA,CAACA,CAACA;YAEzCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,GAAGA,EAAEA,CAACA,IAAIA,CAACA,EAAEA,CAACA;gBAC9BA,IAAIA,eAAeA,GAAGA,IAAIA,CAACA,gBAAgBA,CAACA,SAASA,CAACA,CAACA,CAACA,EAAEA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBAC9FA,EAAEA,CAACA,CAACA,eAAeA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;oBACxBA,IAAIA,CAACA,gBAAgBA,CAACA,SAASA,CAACA,CAACA,CAACA,EAAEA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA;oBAC5EA,IAAIA,CAACA,sBAAsBA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;oBAClDA,YAAYA,CAACA,GAAGA,CAACA,CAACA,eAAeA,GAAGA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;oBAC3CA,IAAIA,CAACA,cAAcA,EAAEA,CAACA;gBAC1BA,CAACA;YACLA,CAACA;YAEDA,EAAEA,CAACA,CAACA,YAAYA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBAC1BA,IAAIA,CAACA,yBAAyBA,CAACA,YAAYA,CAACA,CAACA;YACjDA,CAACA;QACLA,CAACA;QAEDT,2BAA2BA;QACpBA,uBAAKA,GAAZA;YACIU,AACAA,mCADmCA;YACnCA,IAAIA,CAACA,eAAeA,GAAGA,IAAIA,KAAKA,CAACA,IAAIA,CAACA,SAASA,GAAGA,CAACA,CAACA,CAACA;YACrDA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YAElCA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA;YACxBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,EAAEA,EAAEA,CAACA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,MAAMA,EAAEA,CAACA,EAAEA;gBAC5CA,IAAIA,CAACA,UAAUA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;QAC/BA,CAACA;QAEOV,kCAAgBA,GAAxBA,UAAyBA,CAASA,EAAEA,CAASA,EAAEA,CAASA;YACpDW,MAAMA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA,GAAGA,GAAGA,GAAGA,CAACA,GAAGA,GAAGA,GAAGA,CAACA,CAACA,CAACA;QACvDA,CAACA;QAEOX,kCAAgBA,GAAxBA,UAAyBA,CAASA,EAAEA,CAASA,EAAEA,CAASA,EAAEA,KAAaA;YACnEY,IAAIA,CAACA,eAAeA,CAACA,CAACA,GAAGA,GAAGA,GAAGA,CAACA,GAAGA,GAAGA,GAAGA,CAACA,CAACA,GAAGA,KAAKA,CAACA;QACxDA,CAACA;QAEOZ,gCAAcA,GAAtBA,UAAuBA,CAASA,EAAEA,CAASA,EAAEA,CAASA,EAAEA,SAAuBA,EAAEA,OAAiBA;YAC9Fa,IAAIA,aAAaA,GAAGA,IAAIA,CAACA,yBAAyBA,EAAEA,CAACA;YACrDA,IAAIA,mBAAmBA,GAAGA,aAAaA,GAAGA,CAACA,GAAGA,EAAEA,CAACA;YACjDA,IAAIA,iBAAiBA,GAAGA,aAAaA,GAAGA,CAACA,GAAGA,EAAEA,CAACA;YAC/CA,IAAIA,sBAAsBA,GAAGA,CAACA,CAACA;YAG/BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,KAAKA,GAAGA,CAACA,EAAEA,KAAKA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,EAAEA,CAACA;gBACrCA,AACAA,wCADwCA;oBACpCA,cAAcA,GAAGA,mBAAmBA,GAAGA,CAACA,CAACA;gBAC7CA,EAAEA,CAACA,CAACA,iBAAiBA,IAAIA,OAAOA,CAACA,MAAMA,CAACA,CAACA,CAACA;oBACtCA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBAC7BA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA,CAACA;oBACjCA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA,CAACA;oBAEjCA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBAC7BA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA,CAACA;oBACjCA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA,CAACA;oBACjCA,iBAAiBA,IAAIA,CAACA,CAACA;gBAC3BA,CAACA;gBAEDA,AACAA,0BAD0BA;oBACtBA,MAAMA,GAAGA,IAAIA,CAACA,iBAAiBA,CAACA,sBAAsBA,EAAEA,CAACA,CAACA;gBAC9DA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAChDA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAChDA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAEhDA,MAAMA,GAAGA,IAAIA,CAACA,iBAAiBA,CAACA,sBAAsBA,EAAEA,CAACA,CAACA;gBAC1DA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAChDA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAChDA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAEhDA,MAAMA,GAAGA,IAAIA,CAACA,iBAAiBA,CAACA,sBAAsBA,EAAEA,CAACA,CAACA;gBAC1DA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAChDA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAChDA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAEhDA,MAAMA,GAAGA,IAAIA,CAACA,iBAAiBA,CAACA,sBAAsBA,EAAEA,CAACA,CAACA;gBAC1DA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAChDA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;gBAChDA,SAASA,CAACA,mBAAmBA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,CAACA,GAAGA,CAACA,CAACA;YACpDA,CAACA;YAEDA,IAAIA,CAACA,cAAcA,EAAEA,CAACA;YACtBA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,aAAaA,CAACA,CAACA;QAClDA,CAACA;QAEOb,wBAAMA,GAAdA,UAAeA,IAAYA,EAAEA,WAAmBA,EAAEA,aAAqBA,EAAEA,KAAoBA,EAAEA,QAA0BA,EAAEA,QAA0BA;YACjJc,IAAIA,CAACA,YAAYA,GAAGA,WAAWA,CAACA;YAChCA,IAAIA,CAACA,SAASA,GAAGA,aAAaA,CAACA;YAC/BA,IAAIA,CAACA,YAAYA,GAAGA,QAAQA,CAACA;YAC7BA,IAAIA,CAACA,MAAMA,GAAGA,KAAKA,CAACA;YACpBA,IAAIA,CAACA,KAAKA,GAAGA,IAAIA,OAAOA,CAACA,IAAIA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YACjDA,EAAEA,CAACA,CAACA,QAAQA,KAAKA,SAASA,CAACA,CAACA,CAACA;gBACzBA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,GAAGA,QAAQA,CAACA;YACnCA,CAACA;YACDA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,GAAGA,IAAIA,CAACA,YAAYA,CAACA;YACxCA,IAAIA,CAACA,qBAAqBA,EAAEA,CAAAA;YAC5BA,IAAIA,CAACA,SAASA,EAAEA,CAACA;YACjBA,IAAIA,CAACA,sBAAsBA,GAAGA,IAAIA,KAAKA,EAAEA,CAACA;YAC1CA,IAAIA,CAACA,sBAAsBA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAEpCA,AACAA,kBADkBA;YAClBA,IAAIA,CAACA,MAAMA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;QACzBA,CAACA;QAEOd,uCAAqBA,GAA7BA;YACIe,IAAIA,CAACA,iBAAiBA,GAAGA,IAAIA,KAAKA,EAAEA,CAACA;YAErCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,KAAKA,GAAGA,CAACA,EAAEA,KAAKA,GAAGA,IAAIA,CAACA,cAAcA,CAACA,MAAMA,EAAEA,KAAKA,EAAEA,EAAEA,CAACA;gBAC9DA,IAAIA,MAAMA,GAAGA,IAAIA,CAACA,cAAcA,CAACA,KAAKA,CAACA,CAACA;gBAExCA,AACAA,sEADsEA;oBAClEA,KAAKA,GAAGA,IAAIA,OAAOA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA;gBAC9DA,IAAIA,KAAKA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,KAAKA,CAACA,MAAMA,EAAEA,KAAKA,CAACA,CAACA;gBAEjDA,AACAA,0BAD0BA;gBAC1BA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,CAACA,MAAMA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,YAAYA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACjGA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,CAACA,MAAMA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,YAAYA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBAC5FA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,CAACA,MAAMA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,YAAYA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACvFA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,CAACA,MAAMA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,YAAYA,GAAGA,CAACA,CAACA,CAACA,CAACA;YAChGA,CAACA;QACLA,CAACA;QAEMf,4BAAUA,GAAjBA;YACIgB,IAAIA,CAACA,KAAKA,CAACA,0BAA0BA,CAACA,OAAOA,CAACA,YAAYA,CAACA,YAAYA,EAAEA,IAAIA,CAACA,UAAUA,CAACA,CAACA;YAC1FA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,CAACA,IAAIA,CAACA,QAAQA,EAAEA,IAAIA,CAACA,cAAcA,GAAGA,EAAEA,CAACA,CAACA;QACnEA,CAACA;QAEOhB,iCAAeA,GAAvBA,UAAwBA,GAAWA;YAC/BiB,IAAIA,eAAeA,GAAGA,IAAIA,CAACA,SAASA,CAACA;YAErCA,OAAOA,IAAIA,CAACA,SAASA,GAAGA,GAAGA,EAAEA,CAACA;gBAC1BA,AACAA,sBADsBA;gBACtBA,IAAIA,CAACA,SAASA,GAAGA,IAAIA,CAACA,SAASA,GAAGA,CAACA,CAACA;YACxCA,CAACA;YAEDA,OAAOA,CAACA,IAAIA,CAACA,uBAAuBA,GAAGA,IAAIA,CAACA,SAASA,CAACA,CAACA;YACvDA,AACAA,wBADwBA;gBACpBA,YAAYA,GAAGA,IAAIA,CAACA,UAAUA,CAACA;YACnCA,IAAIA,UAAUA,GAAGA,IAAIA,CAACA,QAAQA,CAACA;YAC/BA,IAAIA,gBAAgBA,GAAGA,IAAIA,CAACA,cAAcA,CAACA;YAC3CA,IAAIA,gBAAgBA,GAAQA,IAAIA,CAACA,eAAeA,CAACA;YAEjDA,IAAIA,CAACA,SAASA,EAAEA,CAACA;YAEjBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,IAAIA,gBAAgBA,CAACA,CAACA,CAACA;gBAC/BA,IAAIA,CAACA,eAAeA,CAACA,GAAGA,CAACA,GAAGA,gBAAgBA,CAACA,GAAGA,CAACA,CAACA;YACtDA,CAACA;YAEDA,IAAIA,CAACA,cAAcA,GAAGA,gBAAgBA,CAACA;YACvCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBAC3CA,IAAIA,CAACA,UAAUA,CAACA,CAACA,CAACA,GAAGA,YAAYA,CAACA,CAACA,CAACA,CAACA;YACzCA,CAACA;YACDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,UAAUA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBACzCA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,CAACA;YACtCA,CAACA;QACLA,CAACA;QAEOjB,2CAAyBA,GAAjCA;YACIkB,EAAEA,CAACA,CAACA,IAAIA,CAACA,sBAAsBA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBAC3CA,MAAMA,CAACA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA;YACnCA,CAACA;YACDA,IAAIA,CAACA,CAACA;gBACFA,MAAMA,CAACA,IAAIA,CAACA,sBAAsBA,CAACA,GAAGA,EAAEA,CAACA;YAC7CA,CAACA;QACLA,CAACA;QAEDlB,sBAAWA,oCAAeA;iBAA1BA;gBACImB,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,eAAeA,CAACA;YACtCA,CAACA;iBAEDnB,UAA2BA,KAAcA;gBACrCmB,IAAIA,CAACA,KAAKA,CAACA,eAAeA,GAAGA,KAAKA,CAACA;YACvCA,CAACA;;;WAJAnB;QAMOA,2CAAyBA,GAAjCA,UAAkCA,KAAmBA;YACjDoB,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,KAAKA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBACpCA,IAAIA,SAASA,GAAGA,KAAKA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA;gBAC9BA,IAAIA,CAACA,UAAUA,CAACA,GAAGA,CACfA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,EACxNA,SAASA,CACRA,CAACA;YACVA,CAACA;QACLA,CAACA;QACLpB,cAACA;IAADA,CA5XAD,AA4XCC,IAAAD;IA5XYA,iBAAOA,GAAPA,OA4XZA,CAAAA;AACLA,CAACA,EA9XM,SAAS,KAAT,SAAS,QA8Xf","file":"boxmonger.boxmesh.js","sourceRoot":"C:/Users/etmargra/Documents/GitHub/Samples/Scenes/BoxMonger/","sourcesContent":["module BOXMONGER {\r\n    export class BoxMesh {\r\n        private _mesh: BABYLON.Mesh;\r\n        private _unitBoxSize: number;\r\n        private _boxMaterial: BABYLON.Material;\r\n        private _capacity: number;\r\n        private _indices: number[];\r\n        private _positions: Float32Array;\r\n        private _numberofCubes: number;\r\n        private _cubesPositions: any;\r\n        private _nextWritablePositions: number[];\r\n        private _scene: BABYLON.Scene;\r\n        private _normalsSource: BABYLON.Vector3[] = [\r\n            new BABYLON.Vector3(0, 0, 1),\r\n            new BABYLON.Vector3(0, 0, -1),\r\n            new BABYLON.Vector3(1, 0, 0),\r\n            new BABYLON.Vector3(-1, 0, 0),\r\n            new BABYLON.Vector3(0, 1, 0),\r\n            new BABYLON.Vector3(0, -1, 0)\r\n        ];\r\n        private _cubeVerticeCache: BABYLON.Vector3[];\r\n\r\n        constructor(name: string, unitBoxsize: number, startCapacity: number, scene: BABYLON.Scene, material: BABYLON.Material, position?: BABYLON.Vector3) {\r\n            this._unitBoxSize = unitBoxsize;\r\n            this._capacity = startCapacity;\r\n            this._boxMaterial = material;\r\n            this._scene = scene;\r\n            this._mesh = new BABYLON.Mesh(name, this._scene);\r\n            if (position !== undefined) {\r\n                this._mesh.position = position;\r\n            }\r\n            this._mesh.material = this._boxMaterial;\r\n            this._initCubeVerticeCache()\r\n            this._initMesh();\r\n            this._nextWritablePositions = new Array();\r\n            this._nextWritablePositions.push(0);\r\n\r\n            //adding first box\r\n            this.addBox(0, 0, 0);\r\n        }\r\n\r\n        public get isVisible(): boolean {\r\n            return this._mesh.isVisible;\r\n        }\r\n\r\n        public set isVisible(value: boolean) {\r\n            this._mesh.isVisible = value;\r\n        }\r\n\r\n        public get positionInWorld(): BABYLON.Vector3 {\r\n            return this._mesh.position;\r\n        }\r\n\r\n        public set positionInWorld(value: BABYLON.Vector3) {\r\n            this._mesh.position = value;\r\n        }\r\n\r\n        //Init the mesh with empty values\r\n        private _initMesh() {\r\n            var vertexData = new BABYLON.VertexData();\r\n            vertexData.indices = [];\r\n            vertexData.positions = [];\r\n            vertexData.uvs = [];\r\n            vertexData.normals = [];\r\n\r\n            for (var cubeIndex = 0; cubeIndex < this._capacity; cubeIndex++) {\r\n                // Create each face in turn.\r\n                for (var index = 0; index < this._normalsSource.length; index++) {\r\n                    var normal = this._normalsSource[index];\r\n\r\n                    // Get two vectors perpendicular to the face normal and to each other.\r\n                    var side1 = new BABYLON.Vector3(normal.y, normal.z, normal.x);\r\n                    var side2 = BABYLON.Vector3.Cross(normal, side1);\r\n\r\n                    // Four vertices per face.\r\n                    vertexData.normals.push(normal.x, normal.y, normal.z);\r\n                    vertexData.normals.push(normal.x, normal.y, normal.z);\r\n                    vertexData.normals.push(normal.x, normal.y, normal.z);\r\n                    vertexData.normals.push(normal.x, normal.y, normal.z);\r\n\r\n                    //Configuring uvs\r\n                    if (normal.x === -1) {\r\n                        vertexData.uvs.push(0.0, 0.66);\r\n                        vertexData.uvs.push(0.0, 0.33);\r\n                        vertexData.uvs.push(1.0, 0.33);\r\n                        vertexData.uvs.push(1.0, 0.66);\r\n                    }\r\n                    else if (normal.z === -1) {\r\n                        vertexData.uvs.push(1.0, 0.66);\r\n                        vertexData.uvs.push(0.0, 0.66);\r\n                        vertexData.uvs.push(0.0, 0.33);\r\n                        vertexData.uvs.push(1.0, 0.33);\r\n                    }\r\n                    else if (normal.x === 1) {\r\n                        vertexData.uvs.push(0.0, 0.66);\r\n                        vertexData.uvs.push(0.0, 0.33);\r\n                        vertexData.uvs.push(1.0, 0.33);\r\n                        vertexData.uvs.push(1.0, 0.66);\r\n                    }\r\n                    else if (normal.z === 1) {\r\n                        vertexData.uvs.push(0.0, 0.33);\r\n                        vertexData.uvs.push(1.0, 0.33);\r\n                        vertexData.uvs.push(1.0, 0.66);\r\n                        vertexData.uvs.push(0.0, 0.66);\r\n                    }\r\n                    else if (normal.y === 1) {\r\n                        vertexData.uvs.push(1.0, 1.0);\r\n                        vertexData.uvs.push(0.0, 1.0);\r\n                        vertexData.uvs.push(0.0, 0.6666);\r\n                        vertexData.uvs.push(1.0, 0.6666);\r\n                    }\r\n                    else {\r\n                        vertexData.uvs.push(1.0, 0.33);\r\n                        vertexData.uvs.push(0.0, 0.33);\r\n                        vertexData.uvs.push(0.0, 0.0);\r\n                        vertexData.uvs.push(1.0, 0.0);\r\n                    }\r\n                }\r\n            }\r\n\r\n            vertexData.positions = new Array(this._capacity * 72);\r\n            this._cubesPositions = { };\r\n            this._numberofCubes = 0;\r\n\r\n            //push to the gpu\r\n            vertexData.applyToMesh(this._mesh, true);\r\n            this._positions = new Float32Array(this._mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind));\r\n            this._indices = this._mesh.getIndices();\r\n        }\r\n\r\n        //Add single box\r\n        public addBox(x: number, y: number, z: number) {\r\n            if (this._numberofCubes > this._capacity)\r\n                this._extendCapacity(this._numberofCubes + 1);\r\n\r\n            this._addBoxGeneric(x, y, z, this._positions, this._indices);\r\n        }\r\n\r\n        //Add multiple boxes in batch\r\n        public addBoxes(positions: number[]) {\r\n            if (this._numberofCubes + positions.length / 3 > this._capacity)\r\n                this._extendCapacity(this._numberofCubes + positions.length / 3);\r\n\r\n            var pos = positions.length;\r\n            for (var i = 0; i < pos; i += 3) {\r\n                this._addBoxGeneric(positions[i], positions[i + 1], positions[i + 2], this._positions, this._indices);\r\n            }\r\n        }\r\n\r\n        //Remove single box\r\n        public removeBox(x: number, y: number, z: number) {\r\n            var positionInArray = this._getCubePosition(x, y, z);\r\n            if (positionInArray != undefined) {\r\n                this._setCubePosition(x, y, z, -1);\r\n                this._nextWritablePositions.push(positionInArray);\r\n                this._numberofCubes--;\r\n                this._cleanDataForRemovedCubes(new Float32Array([positionInArray / 3]));\r\n            }\r\n        }\r\n\r\n        public moveBox(x: number, y: number, z: number, newx: number, newy: number, newz: number) {\r\n            var writePosition = this._getCubePosition(x, y, z);\r\n            if (writePosition === undefined)\r\n                return;\r\n\r\n            var positionsWriteStart = writePosition / 3 * 72;\r\n            var indicesWriteStart = writePosition / 3 * 36;\r\n            var positionInVerticeCache = 0;\r\n\r\n            // Create each face in turn.\r\n            for (var index = 0; index < 6; index++) {\r\n                \r\n                // Four vertices per face.\r\n                var vertex = this._cubeVerticeCache[positionInVerticeCache++];\r\n                this._positions[positionsWriteStart++] = vertex.x + newx;\r\n                this._positions[positionsWriteStart++] = vertex.y + newy;\r\n                this._positions[positionsWriteStart++] = vertex.z + newz;\r\n\r\n                vertex = this._cubeVerticeCache[positionInVerticeCache++];\r\n                this._positions[positionsWriteStart++] = vertex.x + newx;\r\n                this._positions[positionsWriteStart++] = vertex.y + newy;\r\n                this._positions[positionsWriteStart++] = vertex.z + newz;\r\n\r\n                vertex = this._cubeVerticeCache[positionInVerticeCache++];\r\n                this._positions[positionsWriteStart++] = vertex.x + newx;\r\n                this._positions[positionsWriteStart++] = vertex.y + newy;\r\n                this._positions[positionsWriteStart++] = vertex.z + newz;\r\n\r\n                vertex = this._cubeVerticeCache[positionInVerticeCache++];\r\n                this._positions[positionsWriteStart++] = vertex.x + newx;\r\n                this._positions[positionsWriteStart++] = vertex.y + newy;\r\n                this._positions[positionsWriteStart++] = vertex.z + newz;\r\n            }\r\n\r\n            this._setCubePosition(newx, newy, newz, writePosition);\r\n        }\r\n\r\n        //Remove multiple boxes in batch\r\n        public removeBoxes(positions: number[]) {\r\n            var pos = positions.length;\r\n            var cubesToClean = new Float32Array(pos);\r\n\r\n            for (var i = 0; i < pos; i += 3) {\r\n                var positionInArray = this._getCubePosition(positions[i], positions[i + 1], positions[i + 2]);\r\n                if (positionInArray != -1) {\r\n                    this._setCubePosition(positions[i], positions[i + 1], positions[i + 2], -1);\r\n                    this._nextWritablePositions.push(positionInArray);\r\n                    cubesToClean.set([positionInArray / 3], i);\r\n                    this._numberofCubes--;\r\n                }\r\n            }\r\n\r\n            if (cubesToClean.length > 0) {\r\n                this._cleanDataForRemovedCubes(cubesToClean);\r\n            }\r\n        }\r\n\r\n        //Remove all boxes in batch\r\n        public empty() {\r\n            //we need to keep at least one cube\r\n            this._cubesPositions = new Array(this._capacity * 3);\r\n            this._setCubePosition(0, 0, 0, 0);\r\n\r\n            this._numberofCubes = 0;\r\n            for (var i = 72; i < this._positions.length; i++)\r\n                this._positions[i] = 0;\r\n        }\r\n\r\n        private _getCubePosition(x: number, y: number, z: number) {\r\n            return this._cubesPositions[x + \"-\" + y + \"-\" + z];\r\n        }\r\n\r\n        private _setCubePosition(x: number, y: number, z: number, value: number) {\r\n            this._cubesPositions[x + \"-\" + y + \"-\" + z] = value;\r\n        }\r\n\r\n        private _addBoxGeneric(x: number, y: number, z: number, positions: Float32Array, indices: number[]) {\r\n            var writePosition = this._getFirstWritablePosition();\r\n            var positionsWriteStart = writePosition / 3 * 72;\r\n            var indicesWriteStart = writePosition / 3 * 36;\r\n            var positionInVerticeCache = 0;\r\n\r\n            // Create each face in turn.\r\n            for (var index = 0; index < 6; index++) {\r\n                // Six indices (two triangles) per face.\r\n                var verticesLength = positionsWriteStart / 3;\r\n                if (indicesWriteStart >= indices.length) {\r\n                    indices.push(verticesLength);\r\n                    indices.push(verticesLength + 1);\r\n                    indices.push(verticesLength + 2);\r\n\r\n                    indices.push(verticesLength);\r\n                    indices.push(verticesLength + 2);\r\n                    indices.push(verticesLength + 3);\r\n                    indicesWriteStart += 6;\r\n                }\r\n\r\n                // Four vertices per face.\r\n                var vertex = this._cubeVerticeCache[positionInVerticeCache++];\r\n                positions[positionsWriteStart++] = vertex.x + x;\r\n                positions[positionsWriteStart++] = vertex.y + y;\r\n                positions[positionsWriteStart++] = vertex.z + z;\r\n\r\n                vertex = this._cubeVerticeCache[positionInVerticeCache++];\r\n                positions[positionsWriteStart++] = vertex.x + x;\r\n                positions[positionsWriteStart++] = vertex.y + y;\r\n                positions[positionsWriteStart++] = vertex.z + z;\r\n\r\n                vertex = this._cubeVerticeCache[positionInVerticeCache++];\r\n                positions[positionsWriteStart++] = vertex.x + x;\r\n                positions[positionsWriteStart++] = vertex.y + y;\r\n                positions[positionsWriteStart++] = vertex.z + z;\r\n\r\n                vertex = this._cubeVerticeCache[positionInVerticeCache++];\r\n                positions[positionsWriteStart++] = vertex.x + x;\r\n                positions[positionsWriteStart++] = vertex.y + y;\r\n                positions[positionsWriteStart++] = vertex.z + z;\r\n            }\r\n\r\n            this._numberofCubes++;\r\n            this._setCubePosition(x, y, z, writePosition);\r\n        }\r\n\r\n        private _Clone(name: string, unitBoxsize: number, startCapacity: number, scene: BABYLON.Scene, material: BABYLON.Material, position?: BABYLON.Vector3) {\r\n            this._unitBoxSize = unitBoxsize;\r\n            this._capacity = startCapacity;\r\n            this._boxMaterial = material;\r\n            this._scene = scene;\r\n            this._mesh = new BABYLON.Mesh(name, this._scene);\r\n            if (position !== undefined) {\r\n                this._mesh.position = position;\r\n            }\r\n            this._mesh.material = this._boxMaterial;\r\n            this._initCubeVerticeCache()\r\n            this._initMesh();\r\n            this._nextWritablePositions = new Array();\r\n            this._nextWritablePositions.push(0);\r\n\r\n            //adding first box\r\n            this.addBox(0, 0, 0);\r\n        }\r\n\r\n        private _initCubeVerticeCache() {\r\n            this._cubeVerticeCache = new Array();\r\n\r\n            for (var index = 0; index < this._normalsSource.length; index++) {\r\n                var normal = this._normalsSource[index];\r\n\r\n                // Get two vectors perpendicular to the face normal and to each other.\r\n                var side1 = new BABYLON.Vector3(normal.y, normal.z, normal.x);\r\n                var side2 = BABYLON.Vector3.Cross(normal, side1);\r\n\r\n                // Four vertices per face.\r\n                this._cubeVerticeCache.push(normal.subtract(side1).subtract(side2).scale(this._unitBoxSize / 2));\r\n                this._cubeVerticeCache.push(normal.subtract(side1).add(side2).scale(this._unitBoxSize / 2));\r\n                this._cubeVerticeCache.push(normal.add(side1).add(side2).scale(this._unitBoxSize / 2));\r\n                this._cubeVerticeCache.push(normal.add(side1).subtract(side2).scale(this._unitBoxSize / 2));\r\n            }\r\n        }\r\n\r\n        public updateMesh() {\r\n            this._mesh.updateVerticesDataDirectly(BABYLON.VertexBuffer.PositionKind, this._positions);\r\n            this._mesh.setIndices(this._indices, this._numberofCubes * 24);\r\n        }\r\n\r\n        private _extendCapacity(min: number) {\r\n            var initialCapacity = this._capacity;\r\n\r\n            while (this._capacity < min) {\r\n                //doubles the capacity\r\n                this._capacity = this._capacity * 2;\r\n            }\r\n\r\n            console.info(\"extending capacity to\" + this._capacity);\r\n            //extend existing arrays\r\n            var oldPositions = this._positions;\r\n            var oldIndices = this._indices;\r\n            var oldNumberOfCubes = this._numberofCubes;\r\n            var oldCubepositions: any = this._cubesPositions;\r\n\r\n            this._initMesh();\r\n\r\n            for (var key in oldCubepositions) {\r\n                this._cubesPositions[key] = oldCubepositions[key];\r\n            }\r\n          \r\n            this._numberofCubes = oldNumberOfCubes;\r\n            for (var i = 0; i < oldPositions.length; i++) {\r\n                this._positions[i] = oldPositions[i];\r\n            }\r\n            for (var i = 0; i < oldIndices.length; i++) {\r\n                this._indices.push(oldIndices[i]);\r\n            }\r\n        }\r\n\r\n        private _getFirstWritablePosition(): number {\r\n            if (this._nextWritablePositions.length === 0) {\r\n                return this._numberofCubes * 3;\r\n            }\r\n            else {\r\n                return this._nextWritablePositions.pop();\r\n            }\r\n        }\r\n\r\n        public get checkCollisions(): boolean {\r\n            return this._mesh.checkCollisions;\r\n        }\r\n\r\n        public set checkCollisions(value: boolean) {\r\n            this._mesh.checkCollisions = value;\r\n        }\r\n\r\n        private _cleanDataForRemovedCubes(cubes: Float32Array) {\r\n            for (var i = 0; i < cubes.length; i++) {\r\n                var cubeIndex = cubes[i] * 72;\r\n                this._positions.set(\r\n                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                    cubeIndex\r\n                    );\r\n            }\r\n        }\r\n    }\r\n}"]}